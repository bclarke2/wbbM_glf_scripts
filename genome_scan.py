"""
This script requires that Biopython is installed on your system.
This script was used to identify the DUF4422 ORF(s) on nucleotide sequences
retrieved from the NCBI Entrez database and search for the glf gene
within 7000 nt of that ORF. It takes as input, a file of nt accession
identifiers and the start position of HSPs derived from a blast search
result. ie., accession, hsp_start_position are comma separated with
one set of values per line. This file can be generated by parsing
a BLAST xml file with the script, get_accession_hspstart.py

genome_scan.py uses epost to post the accessions to Entrez and the
history feature of Entrez is used to fetch the genbank sequences,
one at a time, parse them to find the ORF with DUF4422 and search
for the annotation(s) referenced in SEARCHWORDS.

Note that the postuuid() funcion requires a list of accessions
for input and this must be derived from your file yourself
if you are imoprting this as a module.
The output file is written to in the fetchfasta_entrez_parse()
function and the filename (as with all constants) can be
overwritten in the importing script. I would like to refactor
this in the future to hav the function return a variable to
be written to a file external to the function.

The general idea for this script was given to me by a script
from Evan Mann formerly of the Dept of Mol and Cell
Biology, University of Guelph. I have rewritten his to accomodate
my specific application. I also used someones script as a skeleton
for the post and fetch but I cannot remember where 
I saw it after a number of years.
"""

import sys, os, time
from Bio import Entrez
from Bio import SeqIO


Entrez.email = 'bclarke@uoguelph.ca'
Entrez.api_key = '09ea25f030032e76969cb1267ff153964708'

DATABASE = 'nucleotide'
BATCHSIZE = 1
OUTPUTFILENAME = 'wbbM_plus_glf.txt'
RETTYPE = 'gb'
SEARCHWORDS = ['udp-galactopyranose mutase', 'glf']

def postuuids(idlist, database):

    request = Entrez.epost(db=database, id=','.join(idlist))
    print('\nThe epost request was successful.')
    try:
        result = Entrez.read(request)
    except RuntimeError as e:
        print('\nAn error occured while parsing the request')
        print('Error: {}'.format(e))
        sys.exit(-1)
    
    queryKey = result['QueryKey']
    webEnv = result['WebEnv']
    print('\nQueryKey = {0}\nWebEnv = {1}'.format(queryKey, webEnv))
    return queryKey, webEnv

def fetchfasta_entrez_parse(queryKey, webEnv, count, wbbMHspList):
    from urllib.error import HTTPError
    glfPresent = False
    glfCounter = 0
    keywords = SEARCHWORDS
    hspIndex = 0
    batchSize = BATCHSIZE
    results_file = open(OUTPUTFILENAME, 'w')
    header = '{0}\t{5}\t{6}\t{1}\t{2}\t{3}\t{4}\n'.format('organism', 'protein_id', 'nucl_accession', 'prot_length', 'translation', 'strain', 'serotype')
    results_file.write(header)
    for start in range(0, count, batchSize):
        end = min(count, start + batchSize)
        print('Downloading record(s) {0} to {1}\n'.format(start + 1, end))
        attempt = 0
        while attempt < 3:
            attempt += 1
            try:
                fetchHandle = Entrez.efetch(
                        db=DATABASE,
                        rettype=RETTYPE,
                        retmode='text',
                        retstart=start,
                        retmax=batchSize,
                        webenv=webEnv,
                        query_key=queryKey,
                        idtype='acc'
                        )
            except HTTPError as err:
                if 500 <= err.code <= 599:
                    print('Received an error from the server: {}'.format(err))
                    print('Attempt {} of 3.'.format(attempt))
                    time.sleep(2)
                else:
                    raise
        record  = SeqIO.read(fetchHandle, 'gb')
        fetchHandle.close()
        print('Data read.\n')
        print('Parsing sequence data.\n')
        genBankacc = record.id
        proteinID = ''
        organism = ''
        strain = ''
        serotype = ''
        translation = ''
        wbbMLength = 0
        wbbMStartPosition = 0
        wbbMEndPosition = 0
        for feature in record.features:
            if feature.type == 'source':
                organism = feature.qualifiers['organism'][0]
                try:
                    strain = feature.qualifiers['strain'][0]
                except:
                    strain = ''
                try:
                    serotype = feature.qualifiers['serotype'][0]
                except:
                    serotype = ''
        for feature in record.features:
            if feature.type == 'CDS' and \
                    feature.location_operator != 'join' and \
                    feature.location.start.position <= (wbbMHspList[hspIndex] + 15) and \
                    feature.location.end.position >= (wbbMHspList[hspIndex] + 15):
                wbbMStartPosition = feature.location.start.position
                wbbMEndPosition = feature.location.end.position
                wbbMLength = (abs(feature.location.end.position - feature.location.start.position)) / 3
                print(feature.type, feature.location.start.position, wbbMHspList[hspIndex])
                print(wbbMStartPosition, wbbMEndPosition)
                try:
                    translation = feature.qualifiers['translation'][0]
                except:
                    translation = ''
                try:
                    proteinID = feature.qualifiers['protein_id'][0]
                except:
                    proteinID = ''
        for feature in record.features:
            if feature.type == 'CDS':
                if feature.location.start.position <  (wbbMStartPosition + 7000) and feature.location.start.position >  (wbbMStartPosition - 7000):
                    neighbours = set()
                    if feature.qualifiers.get('gene'):
                        neighbours.add(feature.qualifiers.get('gene')[0])   
                    if feature.qualifiers.get('product'):
                        geneProduct = feature.qualifiers['product'][0]
                        neighbours.add(geneProduct.lower())
                    #print()
                    #print(geneProduct)
                    #print(neighbours)
                    #print(keywords)
                    if any(i in neighbours for i in keywords):
                        glfPresent = True
                        glfCounter += 1
                        break

        print('\nGlf present: {}\n'.format(glfPresent))
        print('Nucl. Accession: ' + genBankacc + '\n')
        # do output
        if glfPresent:
            dataLine = '{0}\t{5}\t{6}\t{1}\t{2}\t{3}\t{4}\n'.format(organism, proteinID, genBankacc, wbbMLength, translation, strain, serotype)
            results_file.write(dataLine)
            print(proteinID)
            print(organism)
            print(translation)


        glfPresent = False
        hspIndex += 1
        print('\nFiles processed: {0} of {1}'.format(hspIndex, count))
        print('{0} instances of UDP-galactopyranose mutase (Glf) found.'.format(glfCounter))
    
    results_file.close()

if __name__ == '__main__':
    
    import sys, os
    from Bio import Entrez
    from Bio import SeqIO

    Entrez.email = 'bclarke@uoguelph.ca'
    Entrez.api_key = '09ea25f030032e76969cb1267ff153964708'
    DATABASE = 'nucleotide'
    BATCHSIZE = 1
    OUTPUTFILENAME = 'wbbM_plus_glf.txt'
    RETTYPE = 'gb'
    SEARCHWORDS = {'udp-galactopyranose mutase', 'glf'}
    
    hitsFile = input('Enter the input file: ')
    fileHandle = open(hitsFile)
    accessionList = []
    hspListTmp = []
    for line in fileHandle:
        accessionList.append(line.split(',')[0])
        hspListTmp.append(line.split(',')[1].rstrip('\n'))
    fileHandle.close()
    hspList = list(map(int, hspListTmp))
    count = len(accessionList)
    queryKey, webEnv = postuuids(accessionList, DATABASE)
    fetchfasta_entrez_parse(queryKey, webEnv, count, hspList)



